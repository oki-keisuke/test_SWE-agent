{"model_name_or_path": "gpt4__pytest-dev__pytest__default_from_url__t-0.00__p-0.95__c-3.00__install-1", "instance_id": "pytest-dev__pytest-i11758", "model_patch": "\ndiff --git a/src/_pytest/_io/terminalwriter.py b/src/_pytest/_io/terminalwriter.py\nindex bf9b766..85fdc07 100644\n--- a/src/_pytest/_io/terminalwriter.py\n+++ b/src/_pytest/_io/terminalwriter.py\n@@ -225,7 +225,7 @@ class TerminalWriter:\n                 )\n                 # pygments terminal formatter may add a newline when there wasn't one.\n                 # We don't want this, remove.\n-                if highlighted[-1] == \"\\n\" and source[-1] != \"\\n\":\n+                if highlighted[-1] == \"\\n\" and source and source[-1] != \"\\n\":\n                     highlighted = highlighted[:-1]\n \n                 # Some lexers will not set the initial color explicitly\ndiff --git a/test_highlight.py b/test_highlight.py\nnew file mode 100644\nindex 0000000..3afd79e\n--- /dev/null\n+++ b/test_highlight.py\n@@ -0,0 +1,10 @@\n+from src._pytest._io.terminalwriter import TerminalWriter\n+\n+def test_highlight_empty_source():\n+    tw = TerminalWriter()\n+    source = ''\n+    highlighted = tw._highlight(source)\n+    assert highlighted == source\n+\n+test_highlight_empty_source()\n+print(\"Test completed successfully, no errors.\")\n"}
{"model_name_or_path": "gpt4__pytest-dev__pytest__default_from_url__t-0.00__p-0.95__c-3.00__install-1", "instance_id": "pytest-dev__pytest-i11758", "model_patch": "\ndiff --git a/src/_pytest/_io/terminalwriter.py b/src/_pytest/_io/terminalwriter.py\nindex bf9b766..3651e21 100644\n--- a/src/_pytest/_io/terminalwriter.py\n+++ b/src/_pytest/_io/terminalwriter.py\n@@ -225,7 +225,7 @@ class TerminalWriter:\n                 )\n                 # pygments terminal formatter may add a newline when there wasn't one.\n                 # We don't want this, remove.\n-                if highlighted[-1] == \"\\n\" and source[-1] != \"\\n\":\n+                if highlighted and highlighted[-1] == \"\\n\" and not source.endswith(\"\\n\"):\n                     highlighted = highlighted[:-1]\n \n                 # Some lexers will not set the initial color explicitly\n"}
{"model_name_or_path": "gpt4__pytest-dev__pytest__default_from_url__t-0.00__p-0.95__c-3.00__install-1", "instance_id": "pytest-dev__pytest-i11758", "model_patch": "\ndiff --git a/src/_pytest/_io/terminalwriter.py b/src/_pytest/_io/terminalwriter.py\nindex bf9b766..6f50650 100644\n--- a/src/_pytest/_io/terminalwriter.py\n+++ b/src/_pytest/_io/terminalwriter.py\n@@ -224,8 +224,7 @@ class TerminalWriter:\n                     ),\n                 )\n                 # pygments terminal formatter may add a newline when there wasn't one.\n-                # We don't want this, remove.\n-                if highlighted[-1] == \"\\n\" and source[-1] != \"\\n\":\n+                if highlighted and highlighted[-1] == \"\\n\" and not source.endswith(\"\\n\"):\n                     highlighted = highlighted[:-1]\n \n                 # Some lexers will not set the initial color explicitly\ndiff --git a/test_highlight.py b/test_highlight.py\nnew file mode 100644\nindex 0000000..938992f\n--- /dev/null\n+++ b/test_highlight.py\n@@ -0,0 +1,18 @@\n+import sys\n+sys.path.insert(0, '/pytest-dev__pytest/src')\n+\n+from _pytest._io.terminalwriter import TerminalWriter\n+\n+# Create a TerminalWriter instance\n+tw = TerminalWriter()\n+\n+# Simulate an empty source string\n+source = ''\n+\n+# Call the _highlight method which previously caused an IndexError\n+# We are using a try-except block to catch any exceptions and print an appropriate message\n+try:\n+    highlighted = tw._highlight(source)\n+    print(\"No IndexError, _highlight method works as expected with an empty source string.\")\n+except IndexError:\n+    print(\"IndexError occurred, the issue is not resolved.\")\n"}
